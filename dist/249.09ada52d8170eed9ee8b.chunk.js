export const __webpack_id__=249;export const __webpack_ids__=[249];export const __webpack_modules__={630:e=>{e.exports="\"use strict\";\n//@ts-nocheck\nvar detail;\n(function (detail) {\n    function get_current_preset_name() {\n        return $('#settings_preset_openai').find(':selected').text();\n    }\n    detail.get_current_preset_name = get_current_preset_name;\n    function get_current_global_lorebooks() {\n        return $('#world_info')\n            .find(':selected')\n            .toArray()\n            .map(node => $(node).text());\n    }\n    function get_current_connection_profile() {\n        return $('#connection_profiles').find(':checked').text();\n    }\n    detail.get_current_connection_profile = get_current_connection_profile;\n    function extract_tags_from(name) {\n        return [...name.matchAll(/【(.*?)】/g)].map(match => match[1]);\n    }\n    function extract_tags() {\n        return _.sortedUniq(_.sortBy([\n            ...extract_tags_from(get_current_preset_name()),\n            ...get_current_global_lorebooks().flatMap(extract_tags_from),\n            ...extract_tags_from(get_current_connection_profile()),\n        ].map(tag => tag.toLowerCase())));\n    }\n    detail.extract_tags = extract_tags;\n    function check_should_enable(title, tags) {\n        return [...title.matchAll(/【(.*?)】/g)]\n            .map(match => match[1])\n            .some(tag_list => tag_list\n            .split('&')\n            .map(tag => tag.toLowerCase())\n            .every(expected => tags.includes(expected)));\n    }\n    detail.check_should_enable = check_should_enable;\n})(detail || (detail = {}));\nasync function toggle_tagged_preset_prompts(tags) {\n    const prompt_anchors = $('#completion_prompt_manager')\n        .find('a[title]')\n        .filter(function () {\n        return ($(this)\n            .text()\n            .match(/【.*?】/) !== null);\n    })\n        .toArray();\n    const prompt_identifiers_to_be_toggled = prompt_anchors\n        .map(prompt_anchor => {\n        const anchor = $(prompt_anchor);\n        const li = anchor.closest('li');\n        const identifier = li.attr('data-pm-identifier');\n        const should_enable = detail.check_should_enable(anchor.attr('title'), tags);\n        const is_enabled = li.find('.prompt-manager-toggle-action').hasClass('fa-toggle-on');\n        return { identifier, should_toggle: should_enable !== is_enabled };\n    })\n        .filter(({ should_toggle }) => should_toggle)\n        .map(({ identifier }) => `identifier=${identifier}`);\n    if (prompt_identifiers_to_be_toggled.length !== 0) {\n        await triggerSlash(`/setpromptentry ${prompt_identifiers_to_be_toggled.join(' ')}`);\n    }\n}\nasync function toggle_tagged_regexes(tags) {\n    const regexes = await getTavernRegexes({ scope: 'all' });\n    let new_regexes = _.cloneDeep(regexes);\n    new_regexes\n        .filter(regex => regex.script_name.match(/【.*?】/) !== null)\n        .forEach(regex => {\n        regex.enabled = detail.check_should_enable(regex.script_name, tags);\n    });\n    if (_.isEqual(regexes, new_regexes)) {\n        return;\n    }\n    await replaceTavernRegexes(new_regexes, { scope: 'all' });\n}\nlet tags = [];\nlet preset_name = '';\nlet connection_profile = '';\nasync function toggle_tags() {\n    const new_tags = detail.extract_tags();\n    const new_preset_name = detail.get_current_preset_name();\n    const new_connection_profile = detail.get_current_connection_profile();\n    if (_.isEqual(tags, new_tags) &&\n        _.isEqual(preset_name, new_preset_name) &&\n        _.isEqual(connection_profile, new_connection_profile)) {\n        return;\n    }\n    tags = new_tags;\n    preset_name = new_preset_name;\n    connection_profile = new_connection_profile;\n    await toggle_tagged_preset_prompts(tags);\n    await toggle_tagged_regexes(tags);\n}\n$(() => {\n    toggle_tags();\n    eventOn(tavern_events.SETTINGS_UPDATED, toggle_tags);\n});\n"}};
export const __webpack_id__=906;export const __webpack_ids__=[906];export const __webpack_modules__={4906:n=>{n.exports="$(async () => {\n  const extensionsData = await getCharacterScriptVariables();\n  if (!extensionsData) return;\n\n  const pluginsToInstall = {};\n\n  for (const [key, value] of Object.entries(extensionsData)) {\n    const t = key.match(/预安装插件-(.*)/);\n    if (!t) continue;\n    const urls = YAML.parse(value);\n    for (const [name, url] of Object.entries(urls)) {\n      let tag = url.replace(/(\\.git|\\/)$/, '');\n      tag = tag.substring(tag.lastIndexOf('/') + 1);\n      pluginsToInstall[tag] = {\n        name,\n        url,\n      };\n    }\n  }\n\n  const current_extensions = await detail.get_third_party_extension_names();\n  const uninstall_extension_tags = _.difference(Object.keys(pluginsToInstall), current_extensions);\n  if (uninstall_extension_tags.length === 0) {\n    return;\n  }\n  if (\n    !(await notify.confirm(\n      '以下需要的插件尚未安装, 是否安装?<br>' +\n        uninstall_extension_tags.map(tag => `- ${pluginsToInstall[tag].name}`).join('<br>'),\n      { leftAlign: true },\n    ))\n  ) {\n    return;\n  }\n  await Promise.allSettled(uninstall_extension_tags.map(tag => detail.install_extension(pluginsToInstall[tag].url)));\n  setTimeout(() => triggerSlash('/reload-page'), 3000);\n});\nlet notify;\n(function (notifys) {\n  async function echo(severity, text) {\n    await triggerSlash(`/echo severity=${severity} \"${text}\"`);\n  }\n  notifys.echo = echo;\n  async function confirm(text, options = {}) {\n    return await SillyTavern.callGenericPopup(text, SillyTavern.POPUP_TYPE.CONFIRM, '', options);\n  }\n  notifys.confirm = confirm;\n})(notify || (notify = {}));\n\n(function (detail) {\n  async function get_third_party_extension_names() {\n    try {\n      const response = await fetch('/api/extensions/discover');\n      if (response.ok) {\n        const extensions = await response.json();\n        return extensions\n          .filter(extension => extension.type !== 'system')\n          .map(extension => extension.name.replace('third-party/', ''));\n      } else {\n        return [];\n      }\n    } catch (err) {\n      console.error(err);\n      return [];\n    }\n  }\n  detail.get_third_party_extension_names = get_third_party_extension_names;\n  async function install_extension(url) {\n    const request = await fetch('/api/extensions/install', {\n      method: 'POST',\n      headers: SillyTavern.getRequestHeaders(),\n      body: JSON.stringify({\n        url,\n      }),\n    });\n    if (!request.ok) {\n      const text = await request.text();\n      notify.echo('warning', `扩展安装失败: ${text || request.statusText}`);\n      console.error('扩展安装失败', request.status, request.statusText, text);\n      return false;\n    }\n    const response = await request.json();\n    notify.echo(\n      'success',\n      `扩展安装成功: 已成功安装由 '${response.author}' 编写的 '${response.display_name}' (版本 ${response.version})!`,\n    );\n    console.debug(`已成功将 '${response.display_name}' 安装到 ${response.extensionPath}`);\n    return true;\n  }\n  detail.install_extension = install_extension;\n  async function check_and_confirm_install_extension(extension_name, url) {\n    const extension_names = await get_third_party_extension_names();\n    if (extension_names.includes(extension_name)) {\n      return false;\n    }\n    const confirmed = await notify.confirm(`检测到酒馆没有安装 ${extension_name} 扩展, 是否安装?`);\n    if (!confirmed) {\n      return false;\n    }\n    return await install_extension(url);\n  }\n  detail.check_and_confirm_install_extension = check_and_confirm_install_extension;\n})(detail || (detail = {}));\n"}};